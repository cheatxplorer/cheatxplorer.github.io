<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lucky Slots - Mobile Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a3a, #0a121a);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }
        
        .game-title {
            font-size: 2rem;
            margin-bottom: 20px;
            text-align: center;
            color: gold;
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }
        
        .balance-display {
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 10px;
            padding: 10px 20px;
            margin-bottom: 20px;
            font-size: 1.2rem;
            border: 2px solid gold;
        }
        
        .slot-machine {
            background-color: #2a3a4a;
            border-radius: 15px;
            padding: 20px;
            width: 100%;
            max-width: 350px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            margin-bottom: 20px;
            border: 3px solid gold;
        }
        
        .reels-container {
            display: flex;
            justify-content: space-between;
            background-color: #fff;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            height: 120px;
            overflow: hidden;
        }
        
        .reel {
            position: relative;
            width: 30%;
            height: 100%;
            background-color: #f0f0f0;
            border-radius: 5px;
            overflow: hidden;
            border: 2px solid #333;
        }
        
        .reel-item {
            position: absolute;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2.5rem;
            transition: transform 0.5s ease-in-out;
        }
        
        .controls {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .bet-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        button {
            padding: 12px 15px;
            font-size: 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.2s;
        }
        
        .bet-btn {
            background-color: #555;
            color: white;
            width: 48%;
        }
        
        .spin-btn {
            background-color: #e74c3c;
            color: white;
            font-size: 1.2rem;
            padding: 15px;
        }
        
        .spin-btn:active {
            transform: scale(0.97);
        }
        
        .result-message {
            margin-top: 20px;
            font-size: 1.2rem;
            text-align: center;
            min-height: 60px;
        }
        
        .win {
            color: gold;
            font-weight: bold;
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .footer {
            margin-top: auto;
            text-align: center;
            font-size: 0.8rem;
            opacity: 0.7;
            padding: 10px;
        }
    </style>
</head>
<body>
    <h1 class="game-title">Lucky Slots</h1>
    
    <div class="balance-display">
        Balance: $<span id="balance">1000</span>
    </div>
    
    <div class="slot-machine">
        <div class="reels-container">
            <div class="reel" id="reel1">
                <div class="reel-item">üçé</div>
            </div>
            <div class="reel" id="reel2">
                <div class="reel-item">üçã</div>
            </div>
            <div class="reel" id="reel3">
                <div class="reel-item">üçí</div>
            </div>
        </div>
        
        <div class="controls">
            <div class="bet-controls">
                <button class="bet-btn" id="decrease-bet">- BET</button>
                <button class="bet-btn" id="increase-bet">+ BET</button>
            </div>
            <div>Current Bet: $<span id="current-bet">10</span></div>
            <button class="spin-btn" id="spin-button">SPIN</button>
        </div>
    </div>
    
    <div class="result-message" id="result"></div>
    
    <div class="footer">
        <p>This is a demo game for entertainment purposes only. No real money is involved.</p>
    </div>

    <script>
        // Game symbols
        const symbols = ['üçé', 'üçã', 'üçí', 'üçá', 'üîî', 'üíé', '7Ô∏è‚É£'];
        
        // Element references
        const balanceDisplay = document.getElementById('balance');
        const betDisplay = document.getElementById('current-bet');
        const decreaseBetBtn = document.getElementById('decrease-bet');
        const increaseBetBtn = document.getElementById('increase-bet');
        const spinButton = document.getElementById('spin-button');
        const resultMessage = document.getElementById('result');
        const reels = [
            document.getElementById('reel1'),
            document.getElementById('reel2'),
            document.getElementById('reel3')
        ];
        
        // Game state
        let balance = 1000;
        let currentBet = 10;
        let isSpinning = false;
        
        // Initialize reels
        reels.forEach(reel => {
            const reelItem = reel.querySelector('.reel-item');
            reelItem.textContent = symbols[Math.floor(Math.random() * symbols.length)];
        });
        
        // Update displays
        function updateDisplay() {
            balanceDisplay.textContent = balance;
            betDisplay.textContent = currentBet;
        }
        
        // Bet controls
        decreaseBetBtn.addEventListener('click', () => {
            if (isSpinning) return;
            if (currentBet > 5) {
                currentBet -= 5;
                updateDisplay();
            }
        });
        
        increaseBetBtn.addEventListener('click', () => {
            if (isSpinning) return;
            if (currentBet < 100 && currentBet + 5 <= balance) {
                currentBet += 5;
                updateDisplay();
            }
        });
        
        // Spin function
        spinButton.addEventListener('click', () => {
            if (isSpinning) return;
            
            if (balance < currentBet) {
                resultMessage.textContent = "Insufficient balance!";
                resultMessage.className = "result-message";
                return;
            }
            
            // Deduct bet amount
            balance -= currentBet;
            updateDisplay();
            
            isSpinning = true;
            resultMessage.textContent = "Good luck!";
            resultMessage.className = "result-message";
            spinButton.disabled = true;
            
            // Animate reels
            const results = [];
            
            reels.forEach((reel, index) => {
                const reelItem = reel.querySelector('.reel-item');
                
                // Random number of spins (3-5)
                const spins = 3 + Math.floor(Math.random() * 3);
                const finalSymbolIndex = Math.floor(Math.random() * symbols.length);
                results.push(symbols[finalSymbolIndex]);
                
                // Animate spinning
                let currentSpin = 0;
                let currentSymbolIndex = 0;
                
                const spinInterval = setInterval(() => {
                    reelItem.textContent = symbols[currentSymbolIndex];
                    currentSymbolIndex = (currentSymbolIndex + 1) % symbols.length;
                    
                    if (currentSpin >= spins * symbols.length) {
                        clearInterval(spinInterval);
                        reelItem.textContent = symbols[finalSymbolIndex];
                        
                        // Check if all reels have stopped
                        if (index === reels.length - 1) {
                            setTimeout(checkWin, 500, results);
                        }
                    }
                    
                    currentSpin++;
                }, 100 + (index * 50));
            });
        });
        
        // Check for winning combinations
        function checkWin(results) {
            let winAmount = 0;
            let message = "";
            
            // All symbols are the same (Jackpot)
            if (results[0] === results[1] && results[1] === results[2]) {
                if (results[0] === '7Ô∏è‚É£') {
                    winAmount = currentBet * 50; // Jackpot
                    message = "JACKPOT! üéâ You won $" + winAmount + "!";
                } else if (results[0] === 'üíé') {
                    winAmount = currentBet * 20;
                    message = "MAJOR WIN! üí∞ You won $" + winAmount + "!";
                } else {
                    winAmount = currentBet * 10;
                    message = "BIG WIN! üéä You won $" + winAmount + "!";
                }
            }
            // Two of the same symbols
            else if (results[0] === results[1] || results[1] === results[2] || results[0] === results[2]) {
                winAmount = currentBet * 2;
                message = "NICE! You won $" + winAmount + "!";
            }
            // Special combo - Any fruit combo
            else if (
                (results[0] === 'üçé' || results[0] === 'üçã' || results[0] === 'üçí' || results[0] === 'üçá') &&
                (results[1] === 'üçé' || results[1] === 'üçã' || results[1] === 'üçí' || results[1] === 'üçá') &&
                (results[2] === 'üçé' || results[2] === 'üçã' || results[2] === 'üçí' || results[2] === 'üçá')
            ) {
                winAmount = currentBet * 1.5;
                message = "Fruit Combo! You won $" + winAmount + "!";
            }
            // No win
            else {
                message = "Try again!";
            }
            
            // Update balance and display
            if (winAmount > 0) {
                balance += winAmount;
                resultMessage.className = "result-message win";
            } else {
                resultMessage.className = "result-message";
            }
            
            resultMessage.textContent = message;
            balanceDisplay.textContent = balance;
            
            // Reset game state
            isSpinning = false;
            spinButton.disabled = false;
            
            // Game over check
            if (balance < 5) {
                setTimeout(() => {
                    alert("Game Over! Your balance is too low. Refreshing the game will reset your balance.");
                    balance = 1000;
                    updateDisplay();
                }, 1000);
            }
        }
        
        // Initial display update
        updateDisplay();
    </script>
</body>
</html>
